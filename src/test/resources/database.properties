devDBURL=jdbc:sqlserver://phgsql01.database.windows.net:1433;DatabaseName=db_rebate
devDBFlowableURL=jdbc:sqlserver://phgsql01.database.windows.net:1433;DatabaseName=db_flowable
devUser=qaautomation@phgsql01
devPassword=iopaXrR7xKfW983NEzjGHAQ4w66vUVcPVcFPnYqgJhBstbCe

uatDBURL=jdbc:sqlserver://phgsqltest01.database.windows.net:1433;DatabaseName=db_rebate
uatDBFlowableURL=jdbc:sqlserver://phgsqltest01.database.windows.net:1433;DatabaseName=db_flowable
uatUser=qaautomation@phgsqltest01
uatPassword=iopaXrR7xKfW983NEzjGHAQ4w66vUVcPVcFPnYqgJhBstbCe


#SQLs to be used for API to fetch LOBs for a Contract
SQLtoPickaValidContract=select top 1 *  from [cfg].[MFR_Contract_Detail] where Is_Current_Flag=1
SQLtoPickAnInvalidContract=select top 1 *  from [cfg].[MFR_Contract_Detail] where Is_Current_Flag=1 order by row_key desc
SQLtoPickAContractWithIsCurrentFlag0=select top 1 *  from [cfg].[MFR_Contract_Detail] where Is_Current_Flag=0

#dbURL=jdbc:sqlserver://phgsqltest01.database.windows.net:1433;DatabaseName=db_rebate
#user=qaautomation@phgsqltest01
#password=iopaXrR7xKfW983NEzjGHAQ4w66vUVcPVcFPnYqgJhBstbCe


# SQLs to be used for retrieving the values from Database
getCountOfMFRName=select count(*) as count from [mstr].[Manufacturer] where is_current_flag=1
getAllActiveMFRID=select manufacturer_id from [mstr].[Manufacturer] where is_current_flag=1 order by manufacturer_id asc
getAllActiveMFRName=select name from [mstr].[Manufacturer] where is_current_flag=1 order by name asc
getAllManufacturerDetails=Select(Select Manufacturer_ID manufacturerId,Name name from [mstr].[Manufacturer] where Is_current_Flag=1 order by Name asc for json path) result



#SQLs to be used for retriving ContractDetails from Datbase
getMFRRowKey=Select top 1 cd.row_Key from [cfg].[vw_MFR_Contract_Detail]cd inner join [cfg].[vw_MFR_Contract_Header] ch on cd.Contract_ID=ch.Contract_ID inner join [mstr].[vw_Manufacturer] M on ch.Manufacturer_ID=M.Manufacturer_ID order by cd.Rec_Created_Date desc
getContractID=select top 1 Contract_ID from [cfg].[MFR_Contract_Detail] where Row_key=?
getManufacturerID=select top 1 Manufacturer_ID from [cfg].[MFR_Contract_Header] where contract_ID=?
getManufacturerDetails=select top 1(Select top 1 JSON_QUERY((select Manufacturer_ID manufacturerId ,Name name,Industry_Relations_Manager industryRelationsManager from [mstr].[Manufacturer] where Manufacturer_ID=? for JSON Path,WITHOUT_ARRAY_WRAPPER)) as manufacturer from [mstr].[Manufacturer] for JSON PATH,WITHOUT_ARRAY_WRAPPER) as ManufacturerDetails from [mstr].[Manufacturer]
getContractDetailJson=select (Select top 1 cd.Row_key 'contractDetail.rowKey', cd.LifeCycle_Status 'contractDetail.lifecycleStatus', cd.Start_Date 'contractDetail.startDate', cd.End_Date 'contractDetail.endDate', cd.rec_Created_date 'contractDetail.recCreatedDate', cd.rec_Created_By 'contractDetail.recCreatedBy', cd.rec_updated_Date 'contractDetail.recUpdatedDate', cd.rec_Updated_by 'contractDetail.recUpdatedBy', cd.Contract_ID 'contractDetail.contractId', cd.Amendment_Number 'contractDetail.amendmentNumber', cd.Amendment_Name 'contractDetail.amendmentName', cd.Version_Number 'contractDetail.versionNumber', json_Query((cd.Contract_Detail_JSON)) 'contractDetail.contractDetailJson', convert(bit, case when cd.end_Date>getdate() then 0 else 1 end) 'contractDetail.contractExpired', cd.Row_key 'contractHeader.rowKey', ch.LifeCycle_Status 'contractHeader.lifecycleStatus', ch.Start_Date 'contractHeader.startDate', ch.End_Date 'contractHeader.endDate', cd.rec_Created_date 'contractHeader.recCreatedDate', cd.rec_Created_By 'contractHeader.recCreatedBy', cd.rec_updated_Date 'contractHeader.recUpdatedDate', cd.rec_Updated_by 'contractHeader.recUpdatedBy', ch.Contract_ID 'contractHeader.contractId', ch.Manufacturer_ID 'contractHeader.manufacturerId', ch.Contract_Type 'contractHeader.contractType', ch.Contract_name 'contractHeader.contractName', ch.Contract_Doc_reference 'contractHeader.contractDocReference', ch.Notes 'contractHeader.notes', mfr.Manufacturer_ID 'manufacturer.manufacturerId', mfr.name 'manufacturer.name', mfr.Industry_Relations_manager 'manufacturer.industryRelationsManager', cd.Start_Date 'manufacturer.startDate', cd.End_Date 'manufacturer.endDate', mfr.Account_Manager 'manufacturer.accountManager', convert(varchar(100),cd.rec_Created_date,114) 'manufacturer.recCreatedDate', cd.rec_Created_By 'manufacturer.recCreatedBy', convert(varchar(100),cd.rec_updated_Date,114) 'manufacturer.recUpdatedDate', cd.rec_Updated_by 'manufacturer.recUpdatedBy' from CFG.VW_MFR_CONTRACT_DETAIL cd join CFG.VW_MFR_CONTRACT_HEADER CH on cd.Contract_ID=ch.Contract_ID join MSTR.VW_MANUFACTURER mfr on ch.Manufacturer_ID=mfr.Manufacturer_ID where cd.Row_Key=? for json path,WITHOUT_ARRAY_WRAPPER) as result
getProcessInstanceID=

# getSelectOption SQLs to be used for retrieving the values from Database
getSelectOptionsQuery=Select (Select top 1 Json_Query( ( Select Code_Value codeValue,Code_Description codeDescription from [ref].[Code_Dictionary] where Code_Type='PricingMethod' for json path)) as PricingMethod , Json_Query ((Select Code_Value codeValue,Code_Description codeDescription from [ref].[Code_Dictionary] where Code_Type='DrugSource' for json path)) as DrugSource , Json_Query ((Select Code_Value codeValue,Code_Description codeDescription from [ref].[Code_Dictionary] where Code_Type='DrugSearchCriteria' for json path)) as DrugSearchCriteria, Json_Query ((Select Code_Value codeValue,Code_Description codeDescription from [ref].[Code_Dictionary] where Code_Type='LifeCycleStatus' for json path)) as LifeCycleStatus, Json_Query ((Select Code_Value codeValue,Code_Description codeDescription from [ref].[Code_Dictionary] where Code_Type='LobNonPartD' for json path)) as LobNonPartD, Json_Query ((Select Code_Value codeValue,Code_Description codeDescription from [ref].[Code_Dictionary] where Code_Type='PaymentTerms' for json path)) as PaymentTerms, Json_Query ((Select Code_Value codeValue,Code_Description codeDescription from [ref].[Code_Dictionary] where Code_Type='RebateableDrugTier' and code_Value!='Better' for json path)) as RebateableDrugTier, Json_Query ((Select Code_Value codeValue,Code_Description codeDescription from [ref].[Code_Dictionary] where Code_Type='CompFrmlPosition' and code_Value!='OnFormulary' for json path)) as CompFrmlPosition, Json_Query ((Select Code_Value codeValue,Code_Description codeDescription from [ref].[Code_Dictionary] where Code_Type='SubmissionWindow' for json path)) as SubmissionWindow, Json_Query ((Select Code_Value codeValue,Code_Description codeDescription from [ref].[Code_Dictionary] where Code_Type='PPAWACResetType' for json path)) as PPAWACResetType, Json_Query ((Select Code_Value codeValue,Code_Description codeDescription from [ref].[Code_Dictionary] where Code_Type='LateFee' for json path)) as LateFee, Json_Query ((Select Code_Value codeValue,Code_Description codeDescription from [ref].[Code_Dictionary] where Code_Type='AuditFrequency' for json path)) as AuditFrequency, Json_Query ((Select Code_Value codeValue,Code_Description codeDescription from [ref].[Code_Dictionary] where Code_Type='PPAWACResetFrequency' for json path)) as PPAWACResetFrequency, Json_Query ((Select Code_Value codeValue,Code_Description codeDescription from [ref].[Code_Dictionary] where Code_Type='PPANetReference' for json path)) as PPANetReference, Json_Query ((Select Code_Value codeValue,Code_Description codeDescription from [ref].[Code_Dictionary] where Code_Type='ProcessingJobStatus' for json path)) as ProcessingJobStatus, Json_Query ((Select Code_Value codeValue,Code_Description codeDescription from [ref].[Code_Dictionary] where Code_Type='CompRestrictions' and code_Value!='HigherTierRequired' and code_Value!='NDCBlockRequired' for json path)) as CompRestrictions, Json_Query ((Select Code_Value codeValue,Code_Description codeDescription from [ref].[Code_Dictionary] where Code_Type='CompDrugTier' for json path)) as CompDrugTier, Json_Query ((Select Code_Value codeValue,Code_Description codeDescription from [ref].[Code_Dictionary] where Code_Type='DisputeDays' for json path)) as DisputeDays, Json_Query ((Select Code_Value codeValue,Code_Description codeDescription from [ref].[Code_Dictionary] where Code_Type='BillingCycle' for json path)) as BillingCycle, Json_Query ((Select Code_Value codeValue,Code_Description codeDescription from [ref].[Code_Dictionary] where Code_Type='ReSubmissionWindow' order by case when code_Value='N/A' then '1' when code_Value='60' then '2' when code_Value='90' then '3' when code_Value='120' then '4' when code_Value='150' then '5' when code_Value='180' then '6' else null end for json path)) as ReSubmissionWindow, Json_Query ((Select Code_Value codeValue,Code_Description codeDescription from [ref].[Code_Dictionary] where Code_Type='UmRule' for json path)) as UmRule, Json_Query ((Select Code_Value codeValue,Code_Description codeDescription from [ref].[Code_Dictionary] where Code_Type='AutoRenewTerm' for json path)) as AutoRenewTerm, Json_Query ((Select Code_Value codeValue,Code_Description codeDescription from [ref].[Code_Dictionary] where Code_Type='Locations' for json path)) as Locations, Json_Query ((Select Code_Value codeValue,Code_Description codeDescription from [ref].[Code_Dictionary] where Code_Type='PPAType' for json path)) as PPAType, Json_Query ((Select Code_Value codeValue,Code_Description codeDescription from [ref].[Code_Dictionary] where Code_Type='LobPartD' for json path)) as LobPartD, Json_Query ((Select Code_Value codeValue,Code_Description codeDescription from [ref].[Code_Dictionary] where Code_Type='FrmlPosition' for json path)) as FrmlPosition, Json_Query ((Select Code_Value codeValue,Code_Description codeDescription from [ref].[Code_Dictionary] where Code_Type='ProdOrMfr' for json path)) as ProdOrMfr, Json_Query ((Select Code_Value codeValue,Code_Description codeDescription from [ref].[Code_Dictionary] where Code_Type='DrugGroupType' for json path)) as DrugGroupType, Json_Query ((Select Code_Value codeValue,Code_Description codeDescription from [ref].[Code_Dictionary] where Code_Type='RebateOptionBillingCycle' for json path)) as RebateOptionBillingCycle, Json_Query ((Select Code_Value codeValue,Code_Description codeDescription from [ref].[Code_Dictionary] where Code_Type='PPABaselineWACDate' for json path)) as PPABaselineWACDate, Json_Query ((Select Code_Value codeValue,Code_Description codeDescription from [ref].[Code_Dictionary] where Code_Type='AuditLookback' for json path)) as AuditLookback, Json_Query ((Select Code_Value codeValue,Code_Description codeDescription from [ref].[Code_Dictionary] where Code_Type='PricingBasis' for json path)) as PricingBasis, Json_Query ((Select Code_Value codeValue,Code_Description codeDescription from [ref].[Code_Dictionary] where Code_Type='FormularyType' for json path)) as FormularyType, Json_Query ((Select Code_Value codeValue,Code_Description codeDescription from [ref].[Code_Dictionary] where Code_Type='PricingRefDate' for json path)) as PricingRefDate, Json_Query ((Select Code_Value codeValue,Code_Description codeDescription from [ref].[Code_Dictionary] where Code_Type='PPAWACResetDate' for json path)) as PPAWACResetDate from [ref].[Code_Dictionary] for json path,WITHOUT_ARRAY_WRAPPER) as result

# PostInitiateNewManufactureContract SQLs to be used delete the record from the Database
deleteContractHeaderByContractName=DELETE FROM [cfg].[MFR_Contract_Header] where Contract_Name LIKE ?
deleteContractDetailByAmendmentName=DELETE FROM [cfg].[MFR_Contract_Detail] where Amendment_Name LIKE ?

getContractIdByContractName=select Contract_ID from [cfg].[MFR_Contract_Header] where Contract_Name=?
getContractLifecycleStatus=select Lifecycle_Status from [cfg].[MFR_Contract_Header] where Contract_id =?
getRowKeyByContractName=select Row_Key from [cfg].[MFR_Contract_Header] where Contract_Name=?
getRowKeyByAmendmentName=select Row_Key from [cfg].[MFR_Contract_Detail] where Amendment_Name=?
getLCSByContractName=select ch.lifecycle_status as headerLCS, cd.lifecycle_status as detailLCS from [cfg].[MFR_Contract_Header] CH, [cfg].[MFR_Contract_Detail] CD where ch.contract_id=cd.contract_id and ch.contract_name=?



# Discard a contract
getContractIDAndRowKey=select top 1 ch.contract_id,ch.row_key,ch.is_current_flag as ContractHeaderIsCurrentFlag,cd.is_current_flag as ContractDetailsIsCurrentFlag from [cfg].[MFR_Contract_Header]ch join [cfg].[MFR_Contract_Detail] cd on ch.contract_id=cd.contract_id where ch.Is_Current_Flag=1 and cd.Is_Current_Flag=1
#verifyIsCurrentFlag=select ch.is_current_flag as ContractHeaderIsCurrentFlag,cd.is_current_flag as ContractDetailsIsCurrentFlag from [cfg].[MFR_Contract_Header]ch join [cfg].[MFR_Contract_Detail] cd on ch.contract_id=cd.contract_id where ch.row_Key=?
updateContractHeader=update [cfg].[MFR_Contract_Header] set IS_Current_Flag=1 where Row_key=?
updateContractDetail=update    [cfg].[MFR_Contract_Detail] set IS_Current_Flag=1 where Row_key=?
verifyContractHeader=select count(*) as count from [cfg].[MFR_Contract_Header] where is_current_flag=0 and contract_id=?
verifyContractDetail=select count(*) as count from [cfg].[MFR_Contract_Detail] where is_current_flag=0 and contract_id =?
verifyDiscardContractHeader=select Is_Current_Flag from [cfg].[MFR_Contract_Header] where contract_id=?
verifyDiscardContractDetails=select Is_Current_Flag from [cfg].[MFR_Contract_Detail] where contract_id=?

#SQLs to be used for API to fetch benefitRules for a Contract by a contract ID
SQLtoPickaValidContractIDfromBenefitRulestable=select top 1 benefit_rule_id, benefit_rule_name, br.Contract_id, ch.contract_id from [cfg].[MFR_Contract_Benefit_Rule] BR, [cfg].[MFR_Contract_Header] CH where BR.contract_id=ch.contract_id  and br.is_current_flag=1  and ch.is_current_flag=1 and BR.lifecycle_status='Approved'
SQLtoGetBenefitRuleDetailsOfaContractAsJson=select top 1(select  benefit_rule_id benefitRuleId, benefit_rule_name benefitRuleName from [cfg].[MFR_Contract_Benefit_Rule] where contract_id=? and Lifecycle_status='Approved' for Json path) as benefit_rule_Json from [cfg].[MFR_Contract_Benefit_Rule]


#SQLs to be used for API to fetchProgramsToProgramGrid
getContractIDOfProgram=Select top 1 pgrm.Contract_ID from [cfg].[MFR_Program] pgrm join [cfg].[MFR_Contract_Detail]cd on pgrm.Contract_ID = cd.Contract_ID join [cfg].[MFR_Contract_Header]ch on cd.Contract_ID= ch.Contract_ID where cd.Is_Current_Flag=1 and ch.Is_Current_Flag=1 and pgrm.Is_Current_Flag=1 and Program_Detail_Json<>'Null' order by cd.Rec_Created_Date desc

getProgramDetailsToProgamGrid=Select * from [cfg].[MFR_Program] where Contract_ID=? and Is_Current_Flag=1
getProgramDetailJSONValues=Select concat('[', STRING_AGG (Program_Detail_Json, ','), ']') Program_Detail_JSON from [cfg].[MFR_Program] where Contract_ID=? and Is_Current_Flag=1
getDrugGroupJSONfromDbForProgramIntialSplit=Select top 1 (Select distinct MFR_Druglist_ID mfrDlId,List_Name listName,List_Type listType From [cfg].[MFR_DrugList] where MFR_Druglist_ID In (
getDrugGroupJSONfromDbForProgramFinalSplit=) for json path) as drugsList from [cfg].[MFR_DrugList]
getContractIDOfProgramHavingCompletedAndInProgressProgramms=Select top 1 cd.Contract_ID from [cfg].[MFR_Program] pgrm join [cfg].[MFR_Contract_Detail]cd on pgrm.Contract_ID = cd.Contract_ID join [cfg].[MFR_Contract_Header]ch on cd.Contract_ID= ch.Contract_ID where cd.Is_Current_Flag=1 and ch.Is_Current_Flag=1 and pgrm.Is_Current_Flag=1 and Program_Detail_Json<>'Null' and pgrm.LifeCycle_Status in ('InProgress','Completed') order by cd.Rec_Created_Date desc
gteContractIDWithIsCurrentFlagZero=Select top 1 cd.Contract_ID from [cfg].[MFR_Program] pgrm join [cfg].[MFR_Contract_Detail]cd on pgrm.Contract_ID = cd.Contract_ID join [cfg].[MFR_Contract_Header]ch on cd.Contract_ID= ch.Contract_ID where cd.Is_Current_Flag=0 and ch.Is_Current_Flag=0 and pgrm.Is_Current_Flag=0 and Program_Detail_Json<>'Null' order by cd.Rec_Created_Date desc

#SQLs to be used for FindDrugGroup of manufactuere API
DBjsonResponse=Select( Select dl.row_key rowKey, dl.life_Cycle_Status lifecycleStatus, cast (dl.MFR_DrugList_ID as int) mfrDrugListId, dl.MFR_Name mfrName, dl.List_Name drugGroupName, dl.List_Type drugGroupType, dl.List_Type_Description drugGroupTypeDesc, dl.mode mode, dl.DrugList_Rule_ID drugListRuleId, dl.Number_Of_Approved_NDC numberOfApprovedNDC, dl.Number_Of_Pending_NDC numberOfPendingNDC, convert(bit,case when dl.Number_Of_Pending_NDC>0 then 1 else 0 end) pendingNDCFlag from [cfg].[vw_MFR_DrugList_Summary] dl where dl.MFR_Name=? order by dl.List_Name asc for json path,INCLUDE_NULL_VALUES) result
getManufactuereName=Select top 1 Name from [mstr].[vw_Manufacturer] mfr join [cfg].[MFR_DrugList] dl on mfr.Manufacturer_ID= dl.Manufacturer_ID where dl.IS_Current_Flag=1 and mfr.Is_Current_Flag=1 order by dl.rec_Created_Date desc
getDrugGroupSummaryFromDB=Select Life_Cycle_Status lifecycleStatus,MFR_DrugList_ID mfrDrugListId,MFR_Name mfrName,List_Name drugGroupName,List_Type drugGroupType,List_Type_Description drugGroupTypeDesc,Mode mode,DrugList_Rule_ID drugListRuleId,Number_Of_Approved_NDC numberOfApprovedNDC,Number_Of_Pending_NDC numberOfPendingNDC from [cfg].[vw_MFR_DrugList_Summary]where MFR_Name=?
#getManufacturerDrugList=Select top 1(select MFR_DrugList_ID mfrDrugListId from [cfg].[vw_MFR_DrugList_Summary]where MFR_Name=? for json path)as mfrDrugListId from [cfg].[vw_MFR_DrugList_Summary]
getNumberofApprovedNDC=Select top 1(select Number_Of_Approved_NDC numberOfApprovedNDC from [cfg].[vw_MFR_DrugList_Summary]where MFR_Name=? for json path)as numberOfApprovedNDC from [cfg].[vw_MFR_DrugList_Summary]
getNumberofPendingNDC=Select top 1(select Number_Of_Pending_NDC numberOfPendingNDC from [cfg].[vw_MFR_DrugList_Summary]where MFR_Name=? for json path)as numberOfPendingNDC from [cfg].[vw_MFR_DrugList_Summary]





#SQLs to be used for API to find all manufacture contract
getCountOfManufactureID=select count(*) as count from [cfg].[MFR_Contract_Header] where is_current_flag=1 and Manufacturer_ID='ASTRA001'
getContractHeaderColumeValueByRowKey=select ? from [cfg].[MFR_Contract_Header] where Row_Key LIKE ?
getContractDetailColumeValueByRowKey=select ? from [cfg].[MFR_Contract_Detail] where Row_Key LIKE ?

# Create Drug SQLs to be used delete the record from the Database
deleteDrugGroupByName=DELETE FROM [cfg].[MFR_DrugList] where List_Name LIKE ?
getDrugListID=select MFR_DrugList_ID from [cfg].[MFR_DrugList] where List_Name Like ?
getDrugListRowKey=select Row_Key from [cfg].[MFR_DrugList] where List_Name Like ?
columnNameDrugList_ID=MFR_DrugList_ID

# GET Drug Group Details SQLs
#getMFRDrugListID=select top 1 MFR_DrugList_ID from [cfg].[MFR_DrugList_Detail]  where Is_Current_Flag=1
getMFRDrugListIDMY=select top 1 DLD.MFR_DrugList_ID from [cfg].[MFR_DrugList_Detail] DLD join [cfg].[MFR_DrugList] DL on DLD.MFR_DrugList_ID=DL.MFR_DrugList_ID where DLD.Is_Current_Flag=1 and DL.Is_Current_Flag=1
getMFRDrugListID=select top 1 Row_Key from [cfg].[MFR_DrugList]  where Is_Current_Flag=1

#SQLs for CreateBeneFitRuleForAContractAPI
contractIdForCreateBenefitRuleForContract=Select Contract_ID from [cfg].[MFR_Contract_Header] where Lifecycle_Status='new'
updateContractHeaderLifeCycleStatusToInProgress=update [cfg].[MFR_Contract_Header] set Lifecycle_Status='InProgress' where Contract_ID=?
updateContractDetailLifeCycleStausToInProgress=update [cfg].[MFR_Contract_Detail] set Lifecycle_Status='InProgress' where Contract_ID=?
deleteBenefitRulesCreated=Delete from [cfg].[MFR_Contract_Benefit_Rule] where Contract_ID=?
updateContractHeaderLifeCycleStatusToNew=update [cfg].[MFR_Contract_Header] set Lifecycle_Status='new' where Contract_ID=?
updateContractDetailLifeCycleStausToNew=update [cfg].[MFR_Contract_Detail] set Lifecycle_Status='new' where Contract_ID=?


# GET BenefitRule by ContractID SQLs
getBenefitRuleContractidInprogress=select top 1 BR.Contract_ID from [cfg].[MFR_Contract_Detail] CD, [cfg].[MFR_Contract_Benefit_Rule] BR where CD.Contract_id=BR.Contract_id and BR.lifecycle_status='InProgress' and CD.lifecycle_status='InProgress' and CD.is_current_flag=1 and BR.is_current_flag=1
getBenefitRuleContractidApproved=select top 1 BR.Contract_ID from [cfg].[MFR_Contract_Detail] CD, [cfg].[MFR_Contract_Benefit_Rule] BR where CD.Contract_id=BR.Contract_id and BR.lifecycle_status='Approved' and CD.lifecycle_status='InProgress' and CD.is_current_flag=1 and BR.is_current_flag=1
getBenefitRuleByContractIDOfBenefit_Rule_ID=select Benefit_Rule_ID from [cfg].[MFR_Contract_Benefit_Rule] where Contract_ID='ABV0011465' and Is_Current_Flag=1
getBenefitRuleByContractIDOfBenefit_Rule_Name=select Benefit_Rule_Name from [cfg].[MFR_Contract_Benefit_Rule] where Contract_ID='ABV0011465' and Is_Current_Flag=1
getBenefitRuleByContractIDOfFormulary_Type=select Formulary_Type from [cfg].[MFR_Contract_Benefit_Rule] where Contract_ID='ABV0011465' and Is_Current_Flag=1
getBenefitRuleByContractIDOfAbove_Value=select Above_Value from [cfg].[MFR_Contract_Benefit_Rule] where Contract_ID='ABV0011465' and Is_Current_Flag=1
getBenefitRuleByContractIDOfBelow_Value=select Below_Value from [cfg].[MFR_Contract_Benefit_Rule] where Contract_ID='ABV0011465' and Is_Current_Flag=1

# SQLS to verify job status summary
scheduledJobs=Select count(*) as ScheduledJobCount from [TXN].[VW_PROCESSING_JOB_RUN] where status=0
runningJobs=Select count(*) as RunningJobCount from [TXN].[VW_PROCESSING_JOB_RUN] where status=1
finishedJobs=Select count(*) as FinishedJobCount from [TXN].[VW_PROCESSING_JOB_RUN] where status in('6','3','5')
cancelledJobs=Select count(*) as CancelledJobCount from [TXN].[VW_PROCESSING_JOB_RUN] where status =2
abortedJobs=Select count(*) as AbortedJobCount from [TXN].[VW_PROCESSING_JOB_RUN] where status =4

#SQLs for API to Change Program Status From InProgress to Completed
sqlToPickaProgramWhichdoesnotHaveaRO=select top 1 * from (select Pro.Mfr_Program_id,Pro.row_key, Ro.MFR_Rebate_Option_ID from [cfg].[MFR_Program] Pro left join [cfg].[MFR_Rebate_Option] RO on pro.Mfr_Program_id=RO.Mfr_Program_id where pro.lifecycle_status='InProgress' and pro.is_current_flag='1') as result where result.MFR_Rebate_Option_ID is NULL
sqlToPickaValidProgramHavingAtleastOneCompletedRO=select A.mfr_program_id Rebate_option_program_id, A.lifecycle_status Rebate_option_lifecycle_status , C.mfr_program_id Manufacturer_program_id, C.lifecycle_status Program_lifecycle_status, C.Row_key from [cfg].[MFR_Rebate_Option] A inner join (select mfr_program_id, count(distinct lifecycle_status) cnt from [cfg].[MFR_Rebate_Option] group by mfr_program_id having count(distinct lifecycle_status)=1) B on A.mfr_program_id=B.mfr_program_id and A.lifecycle_status='Completed' inner join [cfg].[MFR_Program] C on A.mfr_program_id=C.mfr_program_id and C.lifecycle_status='InProgress' where C.Is_Current_Flag=1 and A.Is_Current_Flag=1 group by A.mfr_program_id, A.lifecycle_status, C.mfr_program_id, C.lifecycle_status, c.Row_key
sqlToUpdateProgramStatusFromCompletedToInProgress=update [cfg].[MFR_Program] set lifecycle_status='InProgress' where row_key=?
sqlToPickaProgramHavinganInProgressRO=select top 1 A.mfr_program_id Rebate_option_program_id, A.lifecycle_status Rebate_option_lifecycle_status , C.mfr_program_id Manufacturer_program_id, C.lifecycle_status Program_lifecycle_status, C.Row_key from [cfg].[MFR_Rebate_Option] A inner join (select mfr_program_id, count(distinct lifecycle_status) cnt from [cfg].[MFR_Rebate_Option] group by mfr_program_id having count(distinct lifecycle_status)=1) B on A.mfr_program_id=B.mfr_program_id and A.lifecycle_status='InProgress' inner join [cfg].[MFR_Program] C on A.mfr_program_id=C.mfr_program_id and c.Is_Current_Flag=1 and A.Is_Current_Flag=1 and C.lifecycle_status='InProgress' group by A.mfr_program_id, A.lifecycle_status, C.mfr_program_id, C.lifecycle_status, c.Row_key
sqlToPickaProgramHavingBothInProgressandCompletedRO=select top 1 A.mfr_program_id Rebate_option_program_id, A.lifecycle_status Rebate_option_lifecycle_status , C.mfr_program_id Manufacturer_program_id, C.lifecycle_status Program_lifecycle_status, C.Row_key from [cfg].[MFR_Rebate_Option] A inner join (select mfr_program_id, count(distinct lifecycle_status) cnt from [cfg].[MFR_Rebate_Option] group by mfr_program_id having count(distinct lifecycle_status)=2) B on A.mfr_program_id=B.mfr_program_id inner join [cfg].[MFR_Program] C on A.mfr_program_id=C.mfr_program_id and C.lifecycle_status='InProgress' and C.Is_Current_Flag=1 and A.Is_Current_Flag=1 group by A.mfr_program_id, A.lifecycle_status, C.mfr_program_id, C.lifecycle_status, c.Row_key
# SQLS to Verify Fetch Job List API
fetchJobListAPI=Select ( SELECT Cast(JRUN.Processing_Job_Run_ID as varchar(100)) processingJobRunId, FQH.LIFECYCLE_STATUS lifecycleStatus, JSON_VALUE(PGM.PROGRAM_DETAIL_JSON, '$.programName') AS programName, MFR.NAME AS manufacturerName, JSON_QUERY(CONTRACT_DETAIL_JSON, '$.lineOfBusiness') lineOfBusiness, convert(date,JRUN.REC_CREATED_DATE) jobScheduledDate, iif(JRUN.REC_CREATED_BY like '%@%',SubString(JRUN.REC_CREATED_BY,0,charindex('@',JRUN.REC_CREATED_BY)),JRUN.REC_CREATED_BY ) AS jobScheduledBy, case when STATUS=0 then 'Scheduled' when Status=1 then 'Running' when Status=2 then 'Canceled' when Status=4 then 'Aborted' when Status=3 then 'Finished With Failures' when Status=6 then 'Finished With Warning' when Status=5 then 'Finished' end AS jobStatus, convert(date,JRUN.REC_UPDATED_DATE) AS jobStatusDate, cast(PGM.ROW_KEY as varchar(100)) programRowKey FROM [TXN].[VW_PROCESSING_JOB_RUN] JRUN JOIN [CFG].[VW_MFR_PROGRAM] PGM ON JSON_VALUE(JRUN.CONTEXT, '$.programId') = PGM.ROW_KEY JOIN [TXN].[VW_FORMULARY_QUALIFICATION_HEADER] FQH ON JSON_VALUE(JRUN.CONTEXT, '$.fqHeaderId') = FQH.FORMULARY_QUALIFICATION_HEADER_ID JOIN [CFG].[VW_MFR_CONTRACT_DETAIL] CD ON CD.CONTRACT_ID = PGM.CONTRACT_ID AND ((PGM.START_DATE BETWEEN CD.START_DATE AND CD.END_DATE) AND (PGM.END_DATE BETWEEN CD.START_DATE AND CD.END_DATE)) JOIN [CFG].[VW_MFR_CONTRACT_HEADER] CH ON CH.CONTRACT_ID = CD.CONTRACT_ID AND ((CD.START_DATE BETWEEN CH.START_DATE AND CH.END_DATE) AND (CD.END_DATE BETWEEN CH.START_DATE AND CH.END_DATE)) JOIN [MSTR].[VW_MANUFACTURER] MFR ON CH.MANUFACTURER_ID = MFR.MANUFACTURER_ID AND ((CH.START_DATE BETWEEN MFR.START_DATE AND MFR.END_DATE) AND (CH.END_DATE BETWEEN MFR.START_DATE AND MFR.END_DATE)) ORDER BY JRUN.REC_CREATED_DATE desc for json path,Include_Null_Values)result;

# CreateNewRebateProgram SQLs
deleteRebateProgram=DELETE FROM [cfg].[MFR_Program] where Contract_ID LIKE ?
getMfrDrugListIdByListType=select top 1 MFR_DrugList_ID from [cfg].[MFR_DrugList] where Manufacturer_ID='ASTRA001' and List_Type= ? and Life_Cycle_Status='Approved' and Is_Current_Flag='1'
updateContractHeaderStatusFromNewToInProgress=update [cfg].[MFR_Contract_Header] set Lifecycle_Status='InProgress' where Contract_Name LIKE ?
updateContractDetailsStatusFromNewToInProgress=update [cfg].[MFR_Contract_Detail] set Lifecycle_Status='InProgress' where Amendment_Name LIKE ?
getprogramId=Select MFR_Program_ID from [cfg].[MFR_Program] where Contract_ID= ?
getprogramRowKey=Select Row_key from [cfg].[MFR_Program] where Contract_ID= ?

# CreateNewRebateOptions SQLs
updateContractBenefitRuleToApproveStatus=update [cfg].[MFR_Contract_Benefit_Rule] set Lifecycle_Status='Approved' where Benefit_Rule_Name LIKE ?
deleteBenefitRule=DELETE FROM [cfg].[MFR_Contract_Benefit_Rule] where Benefit_Rule_Name LIKE ?
getMFR_Program_IDByContractID=select MFR_Program_ID from [cfg].[MFR_Program] where Contract_id = ? and Is_Current_Flag='1'
getBenefitRule=select Benefit_Rule_ID from [cfg].[MFR_Contract_Benefit_Rule] where Benefit_Rule_Name Like ?
getBenefitRuleName=select Benefit_Rule_Name from [cfg].[MFR_Contract_Benefit_Rule] where Benefit_Rule_Name Like ?
getRebateOptionIDFromDB=select MFR_Rebate_Option_ID from [cfg].[MFR_Rebate_Option] where MFR_Rebate_Option_Name Like ?
deleteRebateOption=DELETE FROM [cfg].[MFR_Rebate_Option] where MFR_Rebate_Option_Name Like ?

# FindDrugProductDetailsByDrugListIsAndBrandName SQLs
getDrugListIsAndBrandName=select top 1 * from [cfg].[MFR_DrugList_Detail] DD inner join [ref].[Drug_Product] DP  ON DD.Drug_Product_Code=DP.DRUG_PRODUCT_CODE and DP.Is_Current_Flag=1 and DD.Is_Current_Flag=1

# SaveDrugGroupDetails SQLs
getListOfNdcs=select top 3 DRUG_PRODUCT_CODE from [ref].[VW_Drug_Product]  where drug_product_code_type='NDC' and drug_language_code='MEDISPAN' and Is_Current_Flag=1
getListOfExistingNdcs=select top 1 DRUG_PRODUCT_CODE from [ref].[VW_Drug_Product]  where drug_product_code_type='NDC' and drug_language_code='MEDISPAN' and Is_Current_Flag=1
getMFR_DrugList_ID=select MFR_DrugList_ID from [cfg].[MFR_DrugList] where List_Name Like ? and Is_Current_Flag=1
getDrugGroupRowKey=select Row_Key from [cfg].[MFR_DrugList] where List_Name Like ? and Is_Current_Flag=1
#FetchDrugGroup Summary API SQLs
drugGroupSummaryRowkey= Select top 1 row_key from [cfg].[MFR_DrugList] where Is_Current_Flag=1 order by Rec_Created_Date desc
drugGroupSummaryDetails=Select (SELECT DLS1.ROW_KEY rowKey , DLS1.MFR_DRUGLIST_ID mfrDrugListId, DLS1.MFR_NAME mfrName, DLS1.LIST_NAME drugGroupName, DLS1.LIST_TYPE drugGroupType, DLS1.LIST_TYPE_DESCRIPTION drugGroupTypeDesc, DLS1.LIFE_CYCLE_STATUS lifecycleStatus, convert(bit,CASE WHEN DLS1.LIFE_CYCLE_STATUS = 'InProgress' AND DLS2.ROW_KEY IS NOT NULL THEN 1 ELSE 0 END) previouslyApproved, convert(bit,CASE WHEN DLS1.LIFE_CYCLE_STATUS = 'Approved' AND DLS2.ROW_KEY IS NOT NULL THEN 1 ELSE 0 END) openForEdit FROM [CFG].[VW_MFR_DRUGLIST_SUMMARY] DLS1 LEFT JOIN [CFG].[VW_MFR_DRUGLIST_SUMMARY] DLS2 ON DLS2.MFR_DRUGLIST_ID = DLS1.MFR_DRUGLIST_ID AND DLS2.LIFE_CYCLE_STATUS = 'Approved' WHERE DLS1.ROW_KEY =? for json path,Without_Array_Wrapper) result ;


#Term Drug from Drug Group API
fetchDrugListDetail=declare @id varchar (100)=(select top 1 result.MFR_DrugList_ID from (select DLD.MFR_DrugList_ID,count(DLD.MFR_DrugList_ID) as count1 from [cfg].[MFR_DrugList] DL inner join [cfg].[MFR_DrugList_Detail] as DLD on DL.MFR_DrugList_ID=DLD.MFR_DrugList_ID WHERE DL.Is_Current_Flag=1 AND DL.Life_Cycle_Status='InProgress' and DLD.Life_Cycle_Status='Added' and DLD.Is_Current_Flag=1 group by(DLD.MFR_DrugList_ID)) result where result.count1=1) Select top 1 (select  DL.Row_Key ,DL.MFR_DrugList_ID ,DLD.Drug_Product_Code ,DLD.Start_Date ,DLD.End_Date from [cfg].[MFR_DrugList] DL join [cfg].[MFR_DrugList_Detail] as DLD on DL.MFR_DrugList_ID=DLD.MFR_DrugList_ID WHERE DL.Is_Current_Flag=1 AND DL.Life_Cycle_Status='InProgress' and DLD.Life_Cycle_Status='Added' and DLD.Is_Current_Flag=1 and DL.MFR_DrugList_ID=@id order by DL.Rec_Created_Date desc for json path ) result
fetchTwoNDCFromDrugList=declare @id varchar (100)=(select top 1 result.MFR_DrugList_ID from (select DLD.MFR_DrugList_ID,count(DLD.MFR_DrugList_ID) as count1 from [cfg].[MFR_DrugList] DL inner join [cfg].[MFR_DrugList_Detail] as DLD on DL.MFR_DrugList_ID=DLD.MFR_DrugList_ID WHERE DL.Is_Current_Flag=1 AND DL.Life_Cycle_Status='InProgress' and DLD.Life_Cycle_Status='Added' and DLD.Is_Current_Flag=1 group by(DLD.MFR_DrugList_ID)) result where result.count1=2) Select top 1 (select  DL.Row_Key ,DL.MFR_DrugList_ID ,DLD.Drug_Product_Code ,DLD.Start_Date ,DLD.End_Date from [cfg].[MFR_DrugList] DL join [cfg].[MFR_DrugList_Detail] as DLD on DL.MFR_DrugList_ID=DLD.MFR_DrugList_ID WHERE DL.Is_Current_Flag=1 AND DL.Life_Cycle_Status='InProgress' and DLD.Life_Cycle_Status='Added' and DLD.Is_Current_Flag=1 and DL.MFR_DrugList_ID=@id  order by DL.Rec_Created_Date desc for json path ) result
updatingEndDateQuery=Update [cfg].[MFR_DrugList_Detail] set End_Date=
updateLifeCycleStatus=Update [cfg].[MFR_DrugList_Detail] set Life_Cycle_Status='Added' where  Drug_Product_Code=?
lifeCycleStatusCheckQuery=Select Life_Cycle_Status from [cfg].[MFR_DrugList_Detail]	where  Drug_Product_Code=?





getDrugProductCodeSaveDrugGroupDetails=select Drug_Product_Code from [cfg].[MFR_DrugList_Detail] where MFR_DrugList_ID= ? and Is_Current_Flag=1
getRowKeyCodeSaveDrugGroupDetails=select Row_Key from [cfg].[MFR_DrugList_Detail] where MFR_DrugList_ID=465 and Is_Current_Flag=1

# CancelJob SQLs
getPROCESSING_JOB_ID=Select top 1 PROCESSING_JOB_RUN_ID,status from TXN.VW_PROCESSING_JOB_RUN where PROCESSING_JOB_ID=1 and status=?
#Discard drug group API Sql
getNewDrugGroupRowKey=select top 1 row_key from [cfg].[MFR_DrugList] where life_cycle_status='new' and is_current_flag=1
restoreTheDrugGroupStatus=update [cfg].[MFR_DrugList] set is_current_flag=1  where row_key=?
getInProgressDrugGroupRowKey=select top 1 row_key from [cfg].[MFR_DrugList] where life_cycle_status='InProgress' and is_current_flag=1
DiscardedDrugGroupis_current_flag=select is_current_flag from  [cfg].[MFR_DrugList] where row_key=?
getApprovedDrugGroupRowKey=select top 1 row_key from [cfg].[MFR_DrugList] where life_cycle_status='Approved' and is_current_flag=1
getDiscardedDrugGroupRowKey=select top 1 row_key from [cfg].[MFR_DrugList] where life_cycle_status='new' and is_current_flag=0
getInReviewDrugGroupRowKey=select top 1 row_key from [cfg].[MFR_DrugList] where life_cycle_status='InReview' and is_current_flag=1

#Search and fetch DG details by Drug list rowkey and NDC
sqlToFetchValidDRugListRowKey=select top 1 Row_key from [cfg].[MFR_DrugList] where is_current_flag=1
sqlToFetchValidNDC=select top 1 DRUG_PRODUCT_CODE from [ref].[Drug_Product] where is_current_flag=1
sqlToFetchDrugDetailsWithDrugListRowKeyAndNDC=select (select case when DLD.[Row_Key] is null then 0 else DLD.[Row_Key] end AS rowKey ,DLD.life_cycle_status AS lifecycleStatus 		,case when DLD.[START_DATE] is null then '1900-01-01' else DLD.[START_DATE] end AS startDate 		,case when DLD.[END_DATE] is null then '1900-01-01' else DLD.[END_DATE] end AS endDate 		,DLD.[Rec_Created_Date] AS recCreatedDate 		,DLD.[Rec_Created_By] AS recCreatedBy 		,DLD.[Rec_Updated_Date] AS recUpdatedDate 		,DLD.[Rec_Updated_By] AS recUpdatedBy 		,case when DLD.[Row_Key] is null then '' else'YES' end AS 'exists'  		,DP.[MFG_DISTR_NAME] AS mfrName 		,DP.[BRAND_NAME] AS brandName 		,DP.[Drug_PRODUCT_CODE] as ndc 		,NULL AS modifiedDrug 		,NULL AS modifiedDrugFlag 		,DP.[GENERIC_NAME] AS generic 		,DP.[STRENGTH_DESC] AS strength 		,DP.[DOSAGE_FORM] AS dosage 		,trim(DP.[ROUTE_DESC]) AS 'route' 		,DP.[BRAND_GENERIC_FLAG] AS brandOrGenericIndicator 		, CASE 	 			WHEN DP.BRAND_GENERIC_FLAG='BRAND' AND DP.M_MULTI_SOURCE_CODE ='N' THEN 'SSB' 			WHEN DP.BRAND_GENERIC_FLAG='BRAND' AND DP.M_MULTI_SOURCE_CODE ='M' AND M_BRAND_NAME_CODE = 'T' AND REPACK_FLAG = 0 THEN 'SSB' 			WHEN DP.BRAND_GENERIC_FLAG='BRAND' AND DP.M_MULTI_SOURCE_CODE <>'N' THEN 'MSB'  		  END AS ssbOrMSB 		,DP.[M_GPI_NAME] AS therapeuticClassGPI 		,case when DP.[REPACK_FLAG]=0 then 'N' else 'Y' end AS repackaged 		,case when DP.[INST_PROD_FLAG]=0 then 'N' else 'Y' end AS institutional 		,DP.[OBSOLETE_DATE] AS obsoleteDate 		,DP.[START_DATE] AS medispanStartDate 		,DP.[END_DATE] AS medispanEndDate 		,case when DP.[END_DATE]='9999-12-31' then 'true' else 'false' end AS endDateFlag 		 		from [ref].[Vw_Drug_Product] DP 		left join (select DLD1.* from [cfg].[MFR_DrugList_Detail]  DLD1 					join [cfg].[MFR_DrugList] DL1 					on DLD1.MFR_DrugList_ID=DL1.MFR_DrugList_ID 				WHERE DL1.row_key=strToReplace  				and DLD1.Is_Current_Flag=1  				 ) DLD 		on DP.drug_product_code=DLD.drug_product_code 	where DP.drug_product_code Like '%strToReplace%' 	and DP.Is_Current_Flag=1 	and DP.[START_DATE]<getdate() and getdate()<DP.[END_DATE] 	for json path, include_null_values) as result
sqlToFetchValidBrandName=select top 1 Brand_Name from [ref].[Drug_Product] where is_current_flag=1
sqlToFetchDrugDetailsWithDrugListRowKeyAndBrandName=select (select case when DLD.[Row_Key] is null then 0 else DLD.[Row_Key] end AS rowKey ,DLD.life_cycle_status AS lifecycleStatus 		,case when DLD.[START_DATE] is null then '1900-01-01' else DLD.[START_DATE] end AS startDate 		,case when DLD.[END_DATE] is null then '1900-01-01' else DLD.[END_DATE] end AS endDate 		,DLD.[Rec_Created_Date] AS recCreatedDate 		,DLD.[Rec_Created_By] AS recCreatedBy 		,DLD.[Rec_Updated_Date] AS recUpdatedDate 		,DLD.[Rec_Updated_By] AS recUpdatedBy 		,case when DLD.[Row_Key] is null then '' else'YES' end AS 'exists'  		,DP.[MFG_DISTR_NAME] AS mfrName 		,DP.[BRAND_NAME] AS brandName 		,DP.[Drug_PRODUCT_CODE] as ndc 		,NULL AS modifiedDrug 		,NULL AS modifiedDrugFlag 		,DP.[GENERIC_NAME] AS generic 		,DP.[STRENGTH_DESC] AS strength 		,DP.[DOSAGE_FORM] AS dosage 		,trim(DP.[ROUTE_DESC]) AS 'route' 		,DP.[BRAND_GENERIC_FLAG] AS brandOrGenericIndicator 		, CASE 	 			WHEN DP.BRAND_GENERIC_FLAG='BRAND' AND DP.M_MULTI_SOURCE_CODE ='N' THEN 'SSB' 			WHEN DP.BRAND_GENERIC_FLAG='BRAND' AND DP.M_MULTI_SOURCE_CODE ='M' AND M_BRAND_NAME_CODE = 'T' AND REPACK_FLAG = 0 THEN 'SSB' 			WHEN DP.BRAND_GENERIC_FLAG='BRAND' AND DP.M_MULTI_SOURCE_CODE <>'N' THEN 'MSB'  		  END AS ssbOrMSB 		,DP.[M_GPI_NAME] AS therapeuticClassGPI 		,case when DP.[REPACK_FLAG]=0 then 'N' else 'Y' end AS repackaged 		,case when DP.[INST_PROD_FLAG]=0 then 'N' else 'Y' end AS institutional 		,DP.[OBSOLETE_DATE] AS obsoleteDate 		,DP.[START_DATE] AS medispanStartDate 		,DP.[END_DATE] AS medispanEndDate 		,case when DP.[END_DATE]='9999-12-31' then 'true' else 'false' end AS endDateFlag 		 		from [ref].[Vw_Drug_Product] DP 		left join (select DLD1.* from [cfg].[MFR_DrugList_Detail]  DLD1 					join [cfg].[MFR_DrugList] DL1 					on DLD1.MFR_DrugList_ID=DL1.MFR_DrugList_ID 				WHERE DL1.row_key=strToReplace  				and DLD1.Is_Current_Flag=1  				 ) DLD 		on DP.drug_product_code=DLD.drug_product_code 	where DP.Brand_Name Like '%strToReplace%' 	and DP.Is_Current_Flag=1 	and DP.[START_DATE]<getdate() and getdate()<DP.[END_DATE] 	for json path, include_null_values) as result

#fetchFqDetails API
getJobTransactionIDAndProgramRowKey=Select top 1 Processing_Job_Run_Id jobID,JSON_VALUE(txnJob.CONTEXT, '$.programId') programId from [txn].[vw_Processing_Job_Run] txnJob join [txn].[vw_Formulary_Qualification_Header] fqhdr on JSON_VALUE(txnJob.CONTEXT, '$.fqHeaderId')=fqhdr.Formulary_Qualification_Header_ID join [cfg].[vw_MFR_Program] pgrm on JSON_VALUE(txnJob.CONTEXT, '$.programId')=pgrm.Row_Key join [cfg].[vw_MFR_Rebate_Option] ro on pgrm.MFR_Program_ID=ro.MFR_Program_ID join [cfg].[vw_MFR_Contract_Detail] cd on pgrm.Contract_ID=cd.Contract_ID join [cfg].[vw_MFR_Contract_Header] ch on cd.Contract_ID=ch.Contract_ID where txnJob.Status=5 and fqhdr.Lifecycle_Status='InProgress' order by txnJob.Rec_Created_Date desc
getRebateoptionRowkeyRowkeys=SELECT DISTINCT FQR.MFR_REBATE_OPTION_ROW_KEY RORowkey FROM TXN.VW_FORMULARY_QUALIFICATION_RESULT FQR JOIN TXN.VW_FORMULARY_QUALIFICATION_GRID FQG ON FQG.FORMULARY_QUALIFICATION_GRID_ID = FQR.FORMULARY_QUALIFICATION_GRID_ID JOIN TXN.VW_FORMULARY_QUALIFICATION_HEADER FQH ON FQH.FORMULARY_QUALIFICATION_HEADER_ID = FQG.FORMULARY_QUALIFICATION_HEADER_ID WHERE FQH.MFR_PROGRAM_ROW_KEY =?
rebateOptionsForFetchFormularyAPI=Select (SELECT CONVERT(INT,RO.MFR_REBATE_OPTION_ID)as rebateOptionId, RO.ROW_KEY AS rebateOptionRowKey, RO.MFR_REBATE_OPTION_NAME AS rebateOptionName, CONCAT(JSON_VALUE(RO.FORMULARY_REQUIREMENT_JSON, '$.xvalue'),' OF ', JSON_VALUE(RO.FORMULARY_REQUIREMENT_JSON, '$.yvalue')) AS tc, JSON_VALUE(RO.FORMULARY_REQUIREMENT_JSON, '$.formulary.position') AS fp, CONCAT( JSON_VALUE(RO.FORMULARY_REQUIREMENT_JSON, '$.umRule.firstRule'), ' ', JSON_VALUE(RO.FORMULARY_REQUIREMENT_JSON, '$.umRule.firstCondition'), ' ', JSON_VALUE(RO.FORMULARY_REQUIREMENT_JSON, '$.umRule.secondRule'), ' ', JSON_VALUE(RO.FORMULARY_REQUIREMENT_JSON, '$.umRule.secondCondition'), ' ', JSON_VALUE(RO.FORMULARY_REQUIREMENT_JSON, '$.umRule.thirdRule') ) AS um, JSON_VALUE(RO.FORMULARY_REQUIREMENT_JSON, '$.compFormularyPosition') AS compPos, CONCAT( JSON_VALUE(RO.FORMULARY_REQUIREMENT_JSON, '$.compRestrictions.firstRule'), ' ', JSON_VALUE(RO.FORMULARY_REQUIREMENT_JSON, '$.compRestrictions.firstCondition'), ' ', JSON_VALUE(RO.FORMULARY_REQUIREMENT_JSON, '$.compRestrictions.secondRule'), ' ', JSON_VALUE(RO.FORMULARY_REQUIREMENT_JSON, '$.compRestrictions.secondCondition'), ' ', JSON_VALUE(RO.FORMULARY_REQUIREMENT_JSON, '$.compRestrictions.thirdRule'), ' ', JSON_VALUE(RO.FORMULARY_REQUIREMENT_JSON, '$.compRestrictions.thirdCondition'), ' ', JSON_VALUE(RO.FORMULARY_REQUIREMENT_JSON, '$.compRestrictions.fourthRule'), ' ', JSON_VALUE(RO.FORMULARY_REQUIREMENT_JSON, '$.compRestrictions.fourthCondition'), ' ', JSON_VALUE(RO.FORMULARY_REQUIREMENT_JSON, '$.compRestrictions.fifthRule') ) AS compReq FROM CFG.VW_MFR_REBATE_OPTION RO WHERE RO.ROW_KEY IN ( strToReplace ) ORDER BY RO.MFR_REBATE_OPTION_ID for json path) result;


#Delete Drug API SQLs
sqlToGetaValidDrugRowKey=select top 1 DLD.* from [cfg].[MFR_DrugList_Detail] DLD join [cfg].[MFR_DrugList] DL on DLD.mfr_druglist_id=DL.mfr_druglist_id where dl.is_current_flag=1 and DLD.is_current_flag=1 and DLD.Life_Cycle_Status='Approved' and DL.Life_Cycle_Status='InProgress'
deleteValidDrugMsg={"statusCode":200,"statusDetails":[{"statusCode":200,"rowKey":strToReplace,"message":"SUCCESS"}],"rowKeysNotExists":[]}
sqlToCheckDeletedDrug=select * from [cfg].[MFR_DrugList_Detail] where MFR_DrugList_ID='strToReplace' and  Drug_Product_Code='strToReplace' and Start_Date='strToReplace' and End_Date='strToReplace' and Life_Cycle_Status='Deleted'
sqlToDeleteAdeletedDrug=delete [cfg].[MFR_DrugList_Detail] where MFR_DrugList_ID='strToReplace' and  Drug_Product_Code='strToReplace' and Start_Date='strToReplace' and End_Date='strToReplace' and Life_Cycle_Status='Deleted'
sqlToGetaAddedDrugRowKey=select top 1 DLD.* from [cfg].[MFR_DrugList_Detail] DLD join [cfg].[MFR_DrugList] DL on DLD.mfr_druglist_id=DL.mfr_druglist_id where dl.is_current_flag=1 and DLD.is_current_flag=1 and DLD.Life_Cycle_Status='Added' and DL.Life_Cycle_Status='InProgress'
sqlToGetaTermedDrugRowKey=select top 1 DLD.* from [cfg].[MFR_DrugList_Detail] DLD join [cfg].[MFR_DrugList] DL on DLD.mfr_druglist_id=DL.mfr_druglist_id where dl.is_current_flag=1 and DLD.is_current_flag=1 and DLD.Life_Cycle_Status='Termed' and DL.Life_Cycle_Status='InProgress'
sqlToGetaDeletedDrugRowKey=select top 1 DLD.* from [cfg].[MFR_DrugList_Detail] DLD join [cfg].[MFR_DrugList] DL on DLD.mfr_druglist_id=DL.mfr_druglist_id where dl.is_current_flag=1 and DLD.is_current_flag=1 and DLD.Life_Cycle_Status='Deleted' and DL.Life_Cycle_Status='InProgress'
sqlToGetMultipleValidDrugRowKey=select top 2 DLD.* from [cfg].[MFR_DrugList_Detail] DLD join [cfg].[MFR_DrugList] DL on DLD.mfr_druglist_id=DL.mfr_druglist_id where dl.is_current_flag=1 and DLD.is_current_flag=1 and DLD.Life_Cycle_Status='Approved' and DL.Life_Cycle_Status='InProgress'
deleteValidMultipleDrugMsg={"statusCode":200,"statusDetails":[{"statusCode":200,"rowKey":strToReplace,"message":"SUCCESS"},{"statusCode":200,"rowKey":strToReplace,"message":"SUCCESS"}],"rowKeysNotExists":[]}

#SendToRebateOps
getProcessInstID=Select PROC_INST_ID_ from dbo.ACT_RU_VARIABLE where NAME_='contractID' and TEXT_=?